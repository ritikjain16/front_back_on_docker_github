name: Deploy MERN App to AWS with Docker & Docker Compose

on:
  push:
    branches:
      - master  # Runs when code is pushed to the master branch

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1️⃣ Checkout the repository
      - name: Checkout Code
        uses: actions/checkout@v3

      # 2️⃣ Set Up Node.js for Building the Frontend
      - name: Set Up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # 3️⃣ Install & Build Frontend
      - name: Install & Build Frontend
        run: |
          cd frontend
          npm install
          npm run build

      # 4️⃣ Login to Docker Hub
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # 5️⃣ Build & Push Frontend Image
      - name: Build & Push Frontend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mern-frontend:latest ./frontend
          docker push ${{ secrets.DOCKER_USERNAME }}/mern-frontend:latest

      # 6️⃣ Build & Push Backend Image
      - name: Build & Push Backend Image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/mern-backend:latest ./backend
          docker push ${{ secrets.DOCKER_USERNAME }}/mern-backend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      # 7️⃣ Copy files to AWS EC2 (Docker Compose & .env)
      - name: Copy files to EC2
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          source: "docker-compose.yml .env"
          target: "~/mern-deployment/"

      # 8️⃣ SSH into EC2 & Deploy with Docker Compose
      - name: SSH into EC2 & Deploy
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ubuntu
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script: |
            cd ~/mern-deployment
            docker-compose down   # Stop existing containers
            docker-compose pull   # Pull latest images
            docker-compose up -d  # Start new containers in detached mode
            docker system prune -af  # Cleanup unused Docker images
